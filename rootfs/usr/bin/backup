#!/usr/bin/env bash

WORKDIR="/var/lib/backup"

logWrite() {
  # Arguments
  MESSAGE=${1:-}
  LEVEL=${2:-INFO}

  # Variables
  DATE_TIME_STAMP="$(date '+%F %H:%M:%S')"
  LOG_FILE="/var/lib/backup/backup.log"

  echo "${DATE_TIME_STAMP}  ${LEVEL}    ${MESSAGE}" >>"${LOG_FILE}"
}

printLn() {
  MESSAGE="${1:-}"
  LEVEL="${2:-INFO}"

  logWrite "${MESSAGE}" "${LEVEL}"

  if [ "${ERROR}" = "ERROR" ]; then
    echo >&2 "> Error: ${MESSAGE}"
    return
  fi

  if [ "${BACKUP_CRON_VERBOSE}" = "true" ]; then
    echo "> ${MESSAGE}"
  fi
}

marsBackup() {
  TARGET_DB="${1:-}"

  if [ -z "${TARGET_DB}" ]; then
    printLn "TARGET_DB cannot be empty" "ERROR"
    exit 1
  fi

  if [ "${BACKUP_CRON_VERBOSE}" != "true" ]; then
    MARS_PROCESS_VERBOSITY=0
  fi

  printLn "Run 'mars' process" "DEBUG"
  mars --bind=8385 \
    --hostname="127.0.0.1" \
    --username="backup" \
    --password="backup" \
    --databases="${TARGET_DB}" \
    --batchsize="${BACKUP_BATCH_SIZE:-1000000}" \
    --tablethreshold="${BACKUP_TABLE_THRESHOLD:-5000000}" \
    --output-dir="${WORKDIR}" \
    --daily-rotation="${BACKUP_RETENTION_DAYS:-5}" \
    --weekly-rotation="${BACKUP_RETENTION_WEEKS:-2}" \
    --monthly-rotation="${BACKUP_RETENTION_MONTHS:-1}" \
    --verbosity="${MARS_PROCESS_VERBOSITY:-2}" \
    --additionals="--skip-comments --compact --single-transaction"

  return $?
}

# Find existing databases, except mysql, information_schema and performance_schema
printLn "Fetch databases"
DATABASES=$(mysql -e 'show databases;' | sed 1d | grep -v -E "(mysql|information_schema|performance_schema)")

if [ -z "${DATABASES}" ]; then
  printLn "No databases found" "ERROR"
  exit 1
fi

if [ ! -d "${WORKDIR}" ]; then
  printLn "Backup path '${WORKDIR}' not found and will be created" "WARN"
  mkdir -p "${WORKDIR}"
  chmod 740 "${WORKDIR}"
fi

# Mars can handle multiple databases, but we want more control
for DATABASE in ${DATABASES}; do
  printLn "Backing up database ${DATABASE}"
  if ! marsBackup "${DATABASE}"; then
    printLn "Process exited with non-zero exit code" "ERROR"
  fi
done

printLn "Finished"
echo "$(date '+%F %H:%M:%S') - Cron task has been run"
